<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>性能优化</title>
      <link href="/2020/04/27/optimize/"/>
      <url>/2020/04/27/optimize/</url>
      
        <content type="html"><![CDATA[<p>说明：本文件用于记录所有能提升实操技能的东西，包括命令、工具技巧等等。</p><h1 id="routine"><a href="#routine" class="headerlink" title="routine"></a>routine</h1><ul><li>safari 浏览器使用 <code>cmd+shift+R</code> 可进入阅读模式，体验很好。</li></ul><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>技巧文章：<a href="https://mp.weixin.qq.com/s/vCtu4lkcoixJELH2t9r7pg" target="_blank" rel="noopener">shell 技巧</a> </p><p><a href="https://mp.weixin.qq.com/s/h3SXmZ2yMtOKEKdACUx1Ew" target="_blank" rel="noopener">linux shell 必须知道的</a></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>tree -a</td><td>列出目录层级</td></tr><tr><td>ls -lh</td><td>按 M 查看文件大小</td></tr><tr><td>cat -n demo.go</td><td>可以打印行号</td></tr><tr><td>cat /proc/1189824/environ</td><td>tr ‘\0’ ‘\n’ 替换</td></tr><tr><td>cat /proc/cpuinfo | grep “processor”</td><td>核心数</td></tr><tr><td>crontab -l</td><td>定时任务列表</td></tr></tbody></table><h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>dd if=ad_model_20200423174752.bak bs=1024 skip=9543687 count=10 | grep ‘孙���雷’</p><ol><li>每次复制 count<em>bs 大小的内容过来用 grep 查询。但先要跳过 skip</em>bs 大小的内容。</li><li>因此对于特别大的文件，可以先把 count 设为一个很大的值，或者不设 count，这样就会查找整个文件，如果查到，则会有输出；否则没输出。</li><li>如果有可以尝试先跳过一半，再查 count*bs 大小的内容，如果找到，则限定在了前半范围，否则在后半部分，使用用类似二分查找法。</li><li>最后输出 count*bs 整个块。</li></ol><h2 id="云主机"><a href="#云主机" class="headerlink" title="云主机"></a>云主机</h2><p>阿里云登陆：chmod 400 qcrao-home.pem</p><p>ssh -i qcrao-home.pem <a href="mailto:root@47.93.238.9" target="_blank" rel="noopener">root@47.93.238.9</a></p><p>查看默认的 shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p>修改成 zsh（重新连接生效）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// -O 是重命名</span><br><span class="line">wget -c "https://xxx.png" -O 1.png</span><br><span class="line"></span><br><span class="line">// 打印 md 文件里的以 ![] 开头的行，注意转义</span><br><span class="line">cat nr.md | awk '$1 ~ /^ *\!\[\]/'</span><br><span class="line"></span><br><span class="line">// 获得所有图片链接。分别以 ]、(、) 作为分隔符</span><br><span class="line">cat nr.md | awk '$1 ~ /^ *\!\[\]/' | awk -F "]" '&#123;print $2&#125;' | awk -F "\(" '&#123;print $2&#125;' | awk -F "\)" '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><h2 id="处理日志"><a href="#处理日志" class="headerlink" title="处理日志"></a>处理日志</h2><p>找出耗时超过 500 ms 的 case（字符串转数字比较，字符串截断）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/tiger/toutiao/log/rpc; grep 17:53 ad.galaxy.proxy.call.log.2020-03-12_17 | awk -F " " '&#123;if (substr($16,6)+0 &gt; 500000)  print $3, $8, $14, $16&#125;'</span><br></pre></td></tr></table></figure><p>打印 # + 指定列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/tiger/toutiao/log/rpc; grep 17:53 ad.galaxy.proxy.call.log.2020-03-12_17 | awk -F " " '&#123;if (substr($16,6)+0 &gt; 500000)  print $3, $8, $14, $16&#125;' | awk -F " " '&#123;print "#", $2&#125;'</span><br></pre></td></tr></table></figure><p><a href="https://www.infoq.cn/article/bSNpBm7h4GgGj9uTHM3d" target="_blank" rel="noopener">只写 UDP</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动 100 个进程发送请求</span><br><span class="line">cat socketPoolNew.sh </span><br><span class="line"><span class="meta">#</span>!/bin/bash </span><br><span class="line">for i in &#123;1..100&#125;;do </span><br><span class="line">./socketPoolNew 5000000 udp 0 &amp; </span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><a href="https://juejin.im/post/5c272ec66fb9a049e93ccffe" target="_blank" rel="noopener">命令</a></p><p><a href="http://www.liangsonghua.me/archives/399" target="_blank" rel="noopener">TCP 重传抓包分析</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示 sockets 摘要</span><br><span class="line">ss -s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示 CLOSE-WAIT 状态的连接数</span><br><span class="line">ss -ant | grep CLOSE-WAIT | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看进程使用的socket</span><br><span class="line">ss -pl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 找出打开套接字/端口应用程序</span><br><span class="line">ss -pl | grep 3306</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示所有udp连接</span><br><span class="line">ss -u -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 和某个ip的所有连接</span><br><span class="line">ss dst 10.12.180.30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看连接本机最多的前10个ip地址 </span><br><span class="line">ss -antp | awk '&#123;print $4&#125;' | cut -d ':' -f1 | sort | uniq -c  | sort -n -k1 -r | head -n 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 每秒刷新一次网络流量</span><br><span class="line">sar -n DEV 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看网卡是否是单队列</span><br><span class="line">ls /sys/class/net/eth0/queues</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看是否开启 lro</span><br><span class="line">ethtool -k eth0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开启</span><br><span class="line">ethtool -K eth0 lro on</span><br></pre></td></tr></table></figure><h2 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h2><p>查看某进程的所有线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -T -p &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="python-服务器"><a href="#python-服务器" class="headerlink" title="python 服务器"></a>python 服务器</h2><p>python -m SimpleHTTPServer + ${port}(默认8000端口)</p><p>文件：wget http://${ip}:${port}/${file_name}</p><p>文件夹：wget -nH -m http://${ip}:${port}/${dir_name}</p><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p><a href="https://xargin.com/go-compiler-opt/" target="_blank" rel="noopener">曹大 Go 优化</a></p><h2 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h2><h3 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h3><p>在 $HOME/go（默认的 GOPATH）下，新建目录 hello，在 hello 目录里新建 hello.go 文件：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"hello, world\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 hello 目录下执行 <code>go build</code> 命令，会在当前目录下生成 <code>hello 二进制文件</code>。</p><p>在 hello 目录下执行 <code>go install</code> 命令，则会在 $HOME/go（默认的 GOPATH）下生成 <code>hello 二进制文件</code>。</p><p>执行 <code>go clean -i</code> 则会同时删除两处的 <code>hello 二进制文件</code>。</p><hr><p>查看默认的 GO 的 GOROOT：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env GOROOT</span><br></pre></td></tr></table></figure><h3 id="安装多版本的-Go"><a href="#安装多版本的-Go" class="headerlink" title="安装多版本的 Go"></a>安装多版本的 Go</h3><ol><li>在 <a href="https://pkg.go.dev/golang.org/dl" target="_blank" rel="noopener">https://pkg.go.dev/golang.org/dl</a> 页面查看版本号，例如 <code>go1.13.8</code>/<code>go1.14rc1</code>。</li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 会在 $HOME/go（默认的 GOPATH）的 bin 目录下产生 go1.13.8 二进制文件。</span><br><span class="line">go get golang.org/dl/go1.13.8</span><br><span class="line"><span class="meta">#</span> 会将 Go 解压到 /home/raoquancheng/sdk/go1.13.8 路径下。</span><br><span class="line">go1.13.8 download</span><br></pre></td></tr></table></figure></li></ol><p><img src="skills.assets/image-20200216092726304.png" alt="image-20200216092726304"></p><p>执行完后 <code>go1.13.8 download</code>，会将 Go 解压到 <code>/home/raoquancheng/sdk/go1.13.8</code> 路径下。</p><p><img src="skills.assets/image-20200216091230962.png" alt="image-20200216091230962"></p><p>此时就可以使用 <code>go1.13.8</code> 代替 <code>go</code> 来执行新版本的 go 了。如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">→ go1.13.8 env GOROOT</span><br><span class="line">/home/raoquancheng/sdk/go1.13.8</span><br><span class="line">→ go1.13.8 env GOPATH</span><br><span class="line">/home/raoquancheng/go</span><br></pre></td></tr></table></figure><p><img src="skills.assets/image-20200216093753767.png" alt="image-20200216093753767"></p><p>想要卸载也很方便，只用删除掉 GOROOT 和相应的 bin 文件。</p><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 不使用优化。禁用内联和优化</span><br><span class="line">go run -gcflags="-N -l" true.go</span><br><span class="line"></span><br><span class="line">// 编译当前目录，输出 test 文件</span><br><span class="line"> go run -gcflags="-N -l"  -o test</span><br><span class="line"></span><br><span class="line">// 使用优化</span><br><span class="line">go run -gcflags="-m" true.go</span><br><span class="line"></span><br><span class="line">// 查看编译过程。可能会遇到权限问题</span><br><span class="line">sudo GOSSAFUNC=main go build true.go</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 输出编译器如何处理 init 初始化函数</span><br><span class="line">go tool objdump test | grep "TEXT runtime\.init"</span><br><span class="line">go tool objdump test | grep "TEXT main\.init"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 反汇编看 runtime.init 会调用哪些 init 函数</span><br><span class="line">go tool objdump -s "runtime\.init" test | grep "CALL.*init"</span><br><span class="line">go tool objdump -s "main\.init" test | grep "CALL.*init"</span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p><a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html#b2" target="_blank" rel="noopener">内建函数</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 对文件里每一行执行 print 命令</span><br><span class="line">awk '&#123; print &#125;' /etc/passwd</span><br><span class="line"></span><br><span class="line">// 打印每行的第一个变量（用 ":" 作为分隔符）</span><br><span class="line">awk -F ":" '&#123;print $1&#125;' /etc/passwd</span><br><span class="line"></span><br><span class="line">// 打印出第 1 列，第 3 列，中间无空格</span><br><span class="line">awk -F ":" '&#123;print $1 $3&#125;' /etc/passwd</span><br><span class="line"></span><br><span class="line">// 打印出第 1 列，第 3 列，中间有空格</span><br><span class="line">awk -F ":" '&#123;print $1 " " $3&#125;' /etc/passwd</span><br><span class="line"></span><br><span class="line">// 为每行添加一个标注</span><br><span class="line">awk -F ":" '&#123;print "username: " $1 "\t\tuid:" $3&#125;' /etc/passwd</span><br></pre></td></tr></table></figure><p>也可以把命令写到一个 <code>awk</code> 脚本里，这样，可以做更多的事。同样是对每行执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -f myscript.awk myfile.in</span><br></pre></td></tr></table></figure><p>脚本内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> BEGIN 块可以做一些初始化的工作：定义分隔符，打印 title，初始化全局变量等</span><br><span class="line"><span class="meta">#</span> 分隔符使用 FS 表示</span><br><span class="line">BEGIN &#123;</span><br><span class="line">        FS=":"</span><br><span class="line">&#125;</span><br><span class="line">&#123; print $1 &#125;</span><br></pre></td></tr></table></figure><p><code>awk</code> 默认会对每一行执行命令，如果想只对某些特定的行执行，可以在命令前加上正则表达式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/[0‑9]+\.[0‑9]∗/ '&#123; print &#125;'</span><br><span class="line"></span><br><span class="line">BEGIN &#123;</span><br><span class="line">        FS=":"</span><br><span class="line">&#125;</span><br><span class="line">// 包含 system</span><br><span class="line">/system/ &#123; print $1 &#125;</span><br><span class="line"></span><br><span class="line">// 包含小数。[0-9]+ 表示匹配至少一位数字，\. 表示匹配小数点，[0-9]* 随意数字</span><br><span class="line">/[0‑9]+\.[0‑9]∗/ &#123; print $1 &#125;</span><br></pre></td></tr></table></figure><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>生成自定义名称的密钥（一路回车，生成的密钥保存到 <code>~/.ssh</code> 中）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cd 到 .ssh 路径下</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C "raoquancheng@bytedance.com" -f gerrit_rsa</span><br></pre></td></tr></table></figure><p>在文件 <code>~/.ssh/config</code> 配置 ssh 登陆相关的内容（若没有，则 touch 一个），Host 名可以用于 vscode 登陆时显示。在 terminal 中可以直接 ssh aliyun 直接 ssh 登陆。</p><p>登陆开发机时，可以先在本地 <code>.ssh/config</code> 文件里配置登陆方式使用密钥。这样，远程登陆时就不用调置密码了。再将本地所有公钥传输到远程，远程的公钥会追加到 <code>~/.ssh/authorized_keys</code> 文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 复制本地所有公钥到远程的命令</span><br><span class="line">ssh-copy-id -p 22 root@10.227.17.216</span><br></pre></td></tr></table></figure><p>在不同平台需要提供不同的密钥对，需要在生成密钥时指定文件名，配置 <code>.ssh/config</code> 时需要注意指定不同平台使用的私钥文件名（IdentityFile）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">qcrao@byte→ cat ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">    PreferredAuthentications publickey,password</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    AddKeysToAgent yes</span><br><span class="line">    UseKeychain yes</span><br><span class="line"></span><br><span class="line">Host root_dev</span><br><span class="line">  HostName 10.xxx.xxx.xxx</span><br><span class="line">  User root</span><br><span class="line">  ForwardAgent yes</span><br><span class="line">  IdentityFile ~/.ssh/bytedance_rsa</span><br><span class="line"></span><br><span class="line">Host git.byted.org</span><br><span class="line">  HostName git.byted.org</span><br><span class="line">  User raoquancheng</span><br><span class="line">  Port 29418</span><br><span class="line">  IdentityFile ~/.ssh/gerrit_rsa </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开发机</span><br><span class="line">Host 10.xxx.xx.xxx</span><br><span class="line">  HostName 10.xxx.xx.xxx</span><br><span class="line">  User raoquancheng</span><br><span class="line">  ForwardAgent yes</span><br></pre></td></tr></table></figure><h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title="gitconfig"></a>gitconfig</h2><p>文件 <code>~/.gitconfig</code>配置 git 别名，还可以在 <code>~/.bash_profile(mac)</code> 或 <code>~/.bashrc(linux)</code> 里配置 alias。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qcrao@byte→ cat ~/.gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">email = qcrao91@gmail.com</span><br><span class="line">name = qcrao</span><br><span class="line">[alias]</span><br><span class="line">    ck = checkout</span><br><span class="line">    ci = commit -m</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">    ps = push</span><br><span class="line">    pl = pull</span><br><span class="line">    df = diff</span><br><span class="line">    a = add</span><br></pre></td></tr></table></figure><p>而 <code>~/.bash_profile</code> 或 <code>~/.bashrc</code> 里配置的是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alias gs='git status'</span><br><span class="line">alias gu='git add .;git commit -m "update"; git push'</span><br><span class="line">alias ga='git add'</span><br><span class="line">alias gaa='git add .'</span><br><span class="line">alias gb='git branch'</span><br><span class="line">alias gc='git commit'</span><br><span class="line">alias gcm='git commit -m'</span><br><span class="line">alias gco='git checkout'</span><br><span class="line">alias gcom='git checkout master'</span><br><span class="line">alias gcob='git checkout -b'</span><br><span class="line">alias gd='git diff'</span><br><span class="line">alias glg='git log --graph --oneline --decorate --all'</span><br><span class="line">alias gld='git log --pretty=format:"%h %ad %s" --date=short --all'</span><br><span class="line">alias gpl='git pull'</span><br><span class="line">alias gps='git push'</span><br><span class="line">alias gpm='git push origin master'</span><br></pre></td></tr></table></figure><h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><p><a href="https://www.bilibili.com/video/av94727284?t=199" target="_blank" rel="noopener">峰哥的视频</a></p><p>在保存的时候，可以做的事（go 插件设置）：<br>go test; go fmt; go vet（是否可运行）; go lint（是否符合规范）</p><p>在 settings.json 里输入 “go.editorContextMenuCommands”，将快捷命令加入到菜单右键。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>shift + cmd + P</td><td>调出命令窗口</td></tr></tbody></table><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>settings.json</td><td>设置</td></tr><tr><td>generate interface</td><td>s *Student user.User</td></tr><tr><td>add tags to struct fields</td><td></td></tr><tr><td>remove tags from struct fields</td><td>更改字段名后</td></tr><tr><td>add packages to workspace</td><td>将引用的包加入到当前路径下，并不真正移动文件</td></tr></tbody></table><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>除了要安装官方开发的 go 插件，还要装下面这些：</p><p>shift + cmd + P，然后搜索 install，全选，即可安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">go get -v github.com/mdempsky/gocode</span><br><span class="line">go get -v github.com/uudashr/gopkgs/cmd/gopkgs</span><br><span class="line">go get -v github.com/ramya-rao-a/go-outline</span><br><span class="line">go get -v github.com/acroca/go-symbols</span><br><span class="line">go get -v golang.org/x/tools/cmd/guru</span><br><span class="line">go get -v golang.org/x/tools/cmd/gorename</span><br><span class="line">go get -v github.com/cweill/gotests/...</span><br><span class="line">go get -v github.com/fatih/gomodifytag</span><br><span class="line">go get -v github.com/josharian/impl</span><br><span class="line">go get -v github.com/davidrjenni/reftools/cmd/fillstruct</span><br><span class="line">go get -v github.com/haya14busa/goplay/cmd/goplay</span><br><span class="line">go get -v github.com/godoctor/godoctor</span><br><span class="line">go get -v github.com/go-delve/delve/cmd/dlv</span><br><span class="line">go get -v github.com/stamblerre/gocode</span><br><span class="line">go get -v github.com/rogpeppe/godef</span><br><span class="line">go get -v github.com/sqs/goreturns</span><br><span class="line">go get -v golang.org/x/lint/golint</span><br><span class="line">go get golang.org/x/tools/cmd/goimports</span><br><span class="line">go get -u github.com/766b/go-outliner</span><br><span class="line">go1.13.8 get -v golang.org/x/tools/gopls // 使用高版本的可以下</span><br></pre></td></tr></table></figure><p>当然一开始会提示安装，直接点 install 按钮，但有可能安装失败。这时要注意 OUTPUT 栏的提示。然后手动执行以上 17 个命令。</p><p>执行成功后，会在 $GOPATH/bin 路径下生成二进制文件。</p><p>Ps：当 Go 版本是 1.11 时，无法正常使用，换成 1.13 时正常。</p><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>在设置中搜索 terminal，找到 font family，设置成：<code>Meslo LG S DZ for Powerline</code>，重启。</p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p><a href="(https://allcontributors.org/docs/en/emoji-key)">添加贡献者</a>：@all-contributors please add <code>&lt;username&gt;</code> for <code>&lt;contributions&gt;</code></p><h1 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h1><p>computer/host name：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> scutil --get ComputerName</span><br><span class="line"><span class="meta">$</span> scutil --get HostName</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo scutil --set ComputerName 你想要的计算机名称</span><br><span class="line"><span class="meta">$</span> sudo scutil --set HostName 你想要的主机名称</span><br></pre></td></tr></table></figure><p>在 <code>~/.bash_profile(mac)</code> 或 <code>~/.bashrc(linux)</code> 里配置 alias：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias grep='grep --color=auto'</span><br><span class="line"></span><br><span class="line">// 本地拷贝到远程</span><br><span class="line">scp prometheus-2.0.0.linux-amd64.tar.gz raoquancheng@10.227.17.216:~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
